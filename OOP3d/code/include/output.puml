@startuml





/' Objects '/

class Car {
	+Car()
	+Car(int ID, const std::string& make, const std::string& model, int year)
	-m_available : bool
	+getId() : int {query}
	+getYear() : int {query}
	-m_id : int
	-m_year : int
	+operator<<(std::ostream& os, const Car& car) : std :: ostream&
	-m_make : std::string
	-m_model : std::string
	+getMake() : std::string& {query}
	+getModel() : std::string& {query}
	+loadCar(int Id, std::string make, std::string model, int year) : void
	+readCarData() : void
	+saveCar() : void
}


class CarSys {
	+CarSys()
	+~CarSys()
	-m_cars : Car*
	-m_customers : Customer*
	+findCar(int carId) : int
	+findCustomer(int customerId) : int
	-m_carCount : int
	-m_customersCount : int
	+addCar() : void
	+addCustomer() : void
	+loadSys() : void
	+printAllCars() : void
	+printCar() : void
	+printCustomer() : void
	+printReport() : void
	+rentCar() : void
	+saveSys() : void
}


class Customer {
	+Customer()
	+Customer(int id, std::string name, std::string address, std::string phone_number)
	+~Customer()
	-m_reservation : Reservation*
	+getId() : int {query}
	+getReservationCount() : int {query}
	-m_id : int
	-m_reservationCount : int
	+operator<<(ostream& os) : ostream&
	+operator<<(ostream& os, Customer& customer) : ostream&
	+getAddress() : string {query}
	+getName() : string {query}
	+getPhoneNumber() : string {query}
	-m_address : string
	-m_name : string
	-m_phone_number : string
	+addReservation(Reservation reservation) : void
	+readCustomerData() : void
	+saveCustomer() : void
	+setAddress(std::string address) : void
	+setId(int id) : void
	+setName(std::string name) : void
	+setPhoneNumber(std::string phone_number) : void
}


class Invoice {
	+Invoice()
	+Invoice(double m_taxes, RentalAgreement rental_agreement)
	-m_rental_agreement : RentalAgreement
	+getRentalCharges() : double {query}
	+getTaxes() : double {query}
	+getTotalAmountDue() : double {query}
	-m_rental_charges : double
	-m_taxes : double
	-m_total_amount_due : double
	+operator-(double amount_paid) : double
	+operator<<(std::ostream& os) : std :: ostream&
	+operator<<(std::ostream& os, Invoice& invoice) : std :: ostream&
	+readInvoiceData(int period) : void
	+saveInvoice() : void {query}
}


class RentalAgreement {
	+RentalAgreement()
	+RentalAgreement(int rental_period, double rental_rate, double insurance_charges)
	+getInsuranceCharges() : double {query}
	+getRentalRate() : double {query}
	-m_insurance_charges : double
	-m_rental_rate : double
	+operator+(const RentalAgreement& other) : double
	+getRentalPeriod() : int {query}
	+get_rental_price() : int
	-m_rental_period : int
	+operator<<(std::ostream& os, const RentalAgreement& rentalagreement) : std :: ostream&
	+readRentalAgreementData(int rentalPeriod) : void
	+saveRentalAgreement() : void {query}
}


class Reservation {
	+Reservation()
	+Reservation(int carId, int customerId, tm start, tm end, Invoice m_invoice)
	+~Reservation()
	+getInvoice() : Invoice {query}
	-m_invoice : Invoice
	+getCarId() : int {query}
	+getCustomerId() : int {query}
	-m_carId : int
	-m_customerId : int
	+operator<<(std::ostream& os, Reservation& reservation) : std :: ostream&
	+getEndDate() : tm {query}
	+getStartDate() : tm {query}
	-m_endDate : tm
	-m_startDate : tm
	+readReservation() : void
	+saveReservation() : void {query}
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.CarSys o-- .Car


.CarSys o-- .Customer


.Customer o-- .Reservation


.Invoice *-- .RentalAgreement


.Reservation *-- .Invoice






/' Nested objects '/



@enduml
